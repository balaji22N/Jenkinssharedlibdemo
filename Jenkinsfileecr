@Library('Myfirstshlibs') _
pipeline {
  agent  any
  parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '808186499947')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'us-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'nishamoorthy')
        
  }
  stages {
    stage( 'Gitcheckout') {
      when { expression {  params.action == 'create' } }
      steps {
        script {
          gitCheckout(
                branch: "main",
                url: "https://github.com/balaji22N/Jenkinssharedlibdemo.git"
          )
        }
      }
    }
    stage( 'Mavenunittest') {
      when { expression {  params.action == 'create' } }
      steps {
        script {
          mvnTest()
        }
      }
    }
    stage('Integration Test maven'){
      when { expression {  params.action == 'create' } }
      steps{
        script{    
          mvnIntegrationTest()
        }
      }
    }
    stage('Static code analysis: Sonarqube'){
      when { expression {  params.action == 'create' } }
      steps{
        script{
          def SonarqubecredentialsID = 'sonarqubeapi'
          statiCodeAnalysis(SonarqubecredentialsID)
        }
      }
    }
    stage('QualityGateStatus: Sonarqube'){
      when { expression {  params.action == 'create' } }
      steps{
        script{
          def SonarqubecredentialsID = 'sonarqubeapi'
          QualityGateStatus(SonarqubecredentialsID)
        }
      }
    }
    stage( 'Mavenbuild : maven') {
      when { expression {  params.action == 'create' } }
      steps {
        script {
          mvnBuild()
        }
      }
    }
    stage('Docker Image Build : ECR'){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    dockerBuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
         }
     stage('Docker Image Scan: trivy '){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    dockerImageScan("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
        }
         stage('Docker Image Push : ECR '){
          when { expression {  params.action == 'create' } }
             steps{
                script{
                   
                    dockerImagePush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                }
             }
         }   
         //stage('Docker Image Cleanup : ECR '){
         // when { expression {  params.action == 'create' } }
           //  steps{
             //   script{
                  
               //     dockerImageCleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
                //}
             //}
        // }
  }
  }
